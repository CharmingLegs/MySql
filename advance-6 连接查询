/*
含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询
笛卡尔乘积现象：表1 有m行，表2有n行，结果=m*n行

发生原因：没有有效的连接条件
如何避免：添加有效的连接条件

分类：

	按年代分类：
	sql92标准:仅仅支持内连接
	sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接
	
	按功能分类：
		内连接：
			等值连接
			非等值连接
			自连接
		外连接：
			左外连接
			右外连接
			全外连接
		交叉连接
*/

#1、等值连接 
/*

① 多表等值连接的结果为多表的交集部分
②n表连接，至少需要n-1个连接条件
③ 多表的顺序没有要求
④一般需要为表起别名
⑤可以搭配前面介绍的所有子句使用，比如排序、分组、筛选
*/

#案例1：查询女神名和对应的男神名
SELECT name, boyName FROM beauty A INNER JOIN boys B ON A.boyfriend_id = B.id;

#案例2：查询员工名和对应的部门名
SELECT last_name, department_name FROM employees A INNER JOIN departments B ON A.department_id = B.department_id;

#2、为表起别名
/*
①提高语句的简洁度
②区分多个重名的字段
注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定
*/

#查询员工名、工种号、工种名
SELECT last_name, A.job_id, job_title FROM employees A INNER JOIN jobs B ON A.job_id = B.job_id;

#3、两个表的顺序是否可以调换
#查询员工名、工种号、工种名
SELECT e.last_name,e.job_id,j.job_title FROM jobs j,employees e WHERE e.`job_id`=j.`job_id`;

#4、可以加筛选
#案例：查询有奖金的员工名、部门名
SELECT last_name, department_name FROM employees A INNER JOIN departments B ON A.department_id = B.department_id WHERE A.commission_pct IS NOT NULL;

#案例2：查询城市名中第二个字符为o的部门名和城市名
SELECT department_name, city FROM departments A INNER JOIN locations B ON A.location_id = B.location_id WHERE department_name LIKE '_o%';














