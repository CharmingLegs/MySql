/*
含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询
笛卡尔乘积现象：表1 有m行，表2有n行，结果=m*n行

发生原因：没有有效的连接条件
如何避免：添加有效的连接条件

分类：

	按年代分类：
	sql92标准:仅仅支持内连接
	sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接
	
	按功能分类：
		内连接：
			等值连接
			非等值连接
			自连接
		外连接：
			左外连接
			右外连接
			全外连接
		交叉连接
*/

#1、等值连接 
/*

① 多表等值连接的结果为多表的交集部分
②n表连接，至少需要n-1个连接条件
③ 多表的顺序没有要求
④一般需要为表起别名
⑤可以搭配前面介绍的所有子句使用，比如排序、分组、筛选
*/

#案例1：查询女神名和对应的男神名
SELECT name, boyName FROM beauty A INNER JOIN boys B ON A.boyfriend_id = B.id;

#案例2：查询员工名和对应的部门名
SELECT last_name, department_name FROM employees A INNER JOIN departments B ON A.department_id = B.department_id;

#2、为表起别名
/*
①提高语句的简洁度
②区分多个重名的字段
注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定
*/

#查询员工名、工种号、工种名
SELECT last_name, A.job_id, job_title FROM employees A INNER JOIN jobs B ON A.job_id = B.job_id;

#3、两个表的顺序是否可以调换
#查询员工名、工种号、工种名
SELECT e.last_name,e.job_id,j.job_title FROM jobs j,employees e WHERE e.`job_id`=j.`job_id`;

#4、可以加筛选
#案例：查询有奖金的员工名、部门名
SELECT last_name, department_name FROM employees A INNER JOIN departments B ON A.department_id = B.department_id WHERE A.commission_pct IS NOT NULL;

#案例2：查询城市名中第二个字符为o的部门名和城市名
SELECT department_name, city FROM departments A INNER JOIN locations B ON A.location_id = B.location_id WHERE department_name LIKE '_o%';

#5、可以加分组
#案例1：查询每个城市的部门个数
SELECT COUNT(department_id), city FROM departments A INNER JOIN locations B ON A.location_id = B.location_id GROUP BY city;

#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资

#案例3：查询每个工种的工种名和员工的个数，并且按员工个数降序
SELECT COUNT(*), job_title FROM employees A INNER JOIN jobs B ON A.job_id = B.job_id GROUP BY B.job_title ORDER BY COUNT(*) DESC;

#7、可以实现三表连接？
#案例：查询员工名、部门名和所在的城市
SELECT last_name, department_name, city FROM employees A INNER JOIN departments B ON A.department_id = B.department_id INNER JOIN locations C ON Blocation_id = C.location_id;

#2、非等值连接
#案例1：查询员工的工资和工资级别
SELECT salary, grade_level FROM employees A INNER JOIN job_grades B ON a.salary BETWEEN lowest_sal AND highest_sal;

#3、自连接
#案例：查询员工名和上级的名称
SELECT A.last_name, B.last_name FROM employees A INNER JOIN employees B ON A.employee_id = B.manager_id;

#二、sql99语法
/*
语法：
	select 查询列表
	from 表1 别名 【连接类型】
	join 表2 别名 
	on 连接条件
	【where 筛选条件】
	【group by 分组】
	【having 筛选条件】
	【order by 排序列表】
分类：
内连接（★）：inner
外连接
	左外(★):left 【outer】
	右外(★)：right 【outer】
	全外：full【outer】
交叉连接：cross 
*/

#一）内连接
/*
语法：

select 查询列表
from 表1 别名
inner join 表2 别名
on 连接条件;

分类：
等值
非等值
自连接

特点：
①添加排序、分组、筛选
②inner可以省略
③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读
④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集
*/

#二、外连接
 
 /*
 应用场景：用于查询一个表中有，另一个表没有的记录
 
 特点：
 1、外连接的查询结果为主表中的所有记录
	如果从表中有和它匹配的，则显示匹配的值
	如果从表中没有和它匹配的，则显示null
	外连接查询结果=内连接结果+主表中有而从表没有的记录
 2、左外连接，left join左边的是主表
    右外连接，right join右边的是主表
 3、左外和右外交换两个表的顺序，可以实现同样的效果 
 4、全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的
 */
 
#引入：查询男朋友不在男神表的的女神名 
#左外连接
SELECT b.*,bo.* FROM boys bo LEFT OUTER JOIN beauty b ON b.`boyfriend_id` = bo.`id` WHERE b.`id` IS NULL;

#案例1：查询哪个部门没有员工
#左外
SELECT d.*,e.employee_id FROM departments d LEFT OUTER JOIN employees e ON d.`department_id` = e.`department_id` WHERE e.`employee_id` IS NULL;

#右外
SELECT d.*,e.employee_id FROM employees e RIGHT OUTER JOIN departments d ON d.`department_id` = e.`department_id` WHERE e.`employee_id` IS NULL;

#交叉连接
SELECT b.*,bo.* FROM beauty b CROSS JOIN boys bo;
